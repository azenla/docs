{"name":"irc-bot","qualifiedName":"irc/irc-bot","comment":"","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"Bot","qualifiedName":"irc/irc-bot.Bot","preview":"<p>Base Class for Bots</p>"},{"name":"CommandBot","qualifiedName":"irc/irc-bot.CommandBot"},{"name":"CommandEvent","qualifiedName":"irc/irc-bot.CommandEvent"},{"name":"DumbBot","qualifiedName":"irc/irc-bot.DumbBot"}],"typedef":{},"error":[]},"packageName":"irc","packageIntro":"<h1>Dart IRC <a href=\"https://drone.io/github.com/kaendfinger/irc.dart/latest\"><a href=\"https://drone.io/github.com/kaendfinger/irc.dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/kaendfinger/irc.dart/status.png\"></img></a></a></h1>\n<p>The Beautiful IRC Library for Dart that WORKS!</p>\n<h2>Design</h2>\n<p>irc.dart is designed to work out of the box in a very configurable way.</p><ul><li>Optional Synchronous System</li><li>Builtin Bot System</li><li>Ability to create your own bots</li><li>Easy to Understand API</li><li>Use of a lot of Language Features</li><li>Optionally use only what you need</li></ul>\n<h2>Bots</h2>\n<h3>Command Bot</h3>\n<p>The command bot is just a normal bot implementation of commands.</p>\n<pre class=\"dart\"><code>import 'package:irc/irc.dart';\n\nvoid main() {\n    BotConfig config = new BotConfig(\n        host: \"irc.freenode.net\",\n        port: 6667,\n        nickname: \"DartBot\",\n        username: \"DartBot\"\n    );\n\n    CommandBot bot = new CommandBot(config, prefix: \".\");\n\n    bot.whenReady((ReadyEvent event) {\n        event.join(\"#irc.dart\");\n    });\n\n    bot.command(\"help\").listen((MessageEvent event) {\n        event.reply(\"&gt; ${Color.BLUE}Commands${Color.RESET}: ${bot.commands.keys.join(', ')}\");\n    });\n\n    bot.connect();\n}\n</code></pre>\n<h3>Dumb Bot</h3>\n<p>This bot just prints messages to the console.</p>\n<pre class=\"dart\"><code>import 'package:irc/irc.dart';\n\nvoid main() {\n    BotConfig config = new BotConfig(\n        host: \"irc.freenode.net\",\n        port: 6667,\n        nickname: \"DartBot\",\n        username: \"DartBot\"\n    );\n\n    CommandBot bot = new DumbBot(config);\n\n    bot.whenReady((ReadyEvent event) {\n        event.join(\"#irc.dart\");\n    });\n\n    bot.connect();\n}\n</code></pre>\n<h2>Library</h2>\n<p>There is also a plain library to write your own IRC Bots!</p>\n<pre class=\"dart\"><code>import 'package:irc/irc.dart';\n\nvoid main() {\n    BotConfig config = new BotConfig(\n        host: \"irc.esper.net\",\n        port: 6667,\n        nickname: \"DartBot\",\n        username: \"DartBot\"\n    );\n\n    Client client = new Client(config);\n\n    client.on(Events.Ready).listen((ReadyEvent event) {\n        event.join(\"#DirectCode\");\n    });\n\n    client.connect();\n}\n</code></pre>\n<h2>Events</h2>\n<p>The following events are currently available:</p><ul><li>ReadyEvent: When the client is ready to join channels.</li><li>JoinEvent: When a user joins a channel.</li><li>MessageEvent: When the client receives a message.</li><li>LineEvent: When the client receives a line from the IRC Server.</li><li>SendEvent: When the client sends a line to the IRC Server.</li><li>PartEvent When a user leaves a channel.</li><li>ConnectEvent: When the client connects to the server.</li><li>BotJoinEvent: When the client joins a channel.</li><li>BotPartEvent: When the client leaves a channel.</li><li>DisconnectEvent: When the client disconnects from the server.</li></ul>\n<p>To register an event handler on a Client or Bot, where client is a Client or Bot, <code>EventName</code> is the name of the event above without the 'Event' ending, and <code>SomeEvent</code> is the full name above:</p>\n<pre class=\"dart\"><code>client.on(Events.EventName).listen((SomeEvent event) {\n    useTheEvent(event);\n});\n</code></pre>"}