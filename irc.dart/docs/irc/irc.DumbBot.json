{"name":"DumbBot","qualifiedName":"irc/irc.DumbBot","comment":"","isAbstract":false,"superclass":"irc/irc.Bot","implements":[],"subclass":[],"variables":{"channels":{"name":"channels","qualifiedName":"irc/irc.DumbBot.channels","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"irc/irc.DumbBot.DumbBot-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"config":{"name":"config","optional":false,"named":false,"default":false,"type":[{"outer":"irc/irc.BotConfig","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"client":{"name":"client","qualifiedName":"irc/irc.DumbBot.client","comment":"","commentFrom":"irc.Bot.client","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"irc/irc.Client","inner":[]}],"parameters":{},"annotations":[{"name":"irc/dart-core.override","parameters":[]}]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"irc/irc.DumbBot.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>irc/irc.DumbBot.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"irc/irc.DumbBot.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"irc/irc.DumbBot.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>irc/irc.DumbBot.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>irc/irc.DumbBot.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"client":{"name":"client","qualifiedName":"irc/irc.DumbBot.client","comment":"","commentFrom":"","inheritedFrom":"irc.Bot.client","static":false,"abstract":true,"constant":false,"return":[{"outer":"irc/irc.Client","inner":[]}],"parameters":{},"annotations":[]},"connect":{"name":"connect","qualifiedName":"irc/irc.DumbBot.connect","comment":"","commentFrom":"","inheritedFrom":"irc.Bot.connect","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"disconnect":{"name":"disconnect","qualifiedName":"irc/irc.DumbBot.disconnect","comment":"","commentFrom":"","inheritedFrom":"irc.Bot.disconnect","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"join":{"name":"join","qualifiedName":"irc/irc.DumbBot.join","comment":"","commentFrom":"","inheritedFrom":"irc.Bot.join","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"channel":{"name":"channel","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"irc/irc.DumbBot.noSuchMethod","comment":"<p><a>irc/irc.DumbBot.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>irc/irc.DumbBot.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>irc/irc.DumbBot.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>irc/irc.DumbBot.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"on":{"name":"on","qualifiedName":"irc/irc.DumbBot.on","comment":"","commentFrom":"","inheritedFrom":"irc.Bot.on","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"irc/irc.Event","inner":[]}]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"event_bus.EventType","inner":[{"outer":"irc/irc.Event","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"onConnect":{"name":"onConnect","qualifiedName":"irc/irc.DumbBot.onConnect","comment":"","commentFrom":"","inheritedFrom":"irc.Bot.onConnect","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"irc/irc.ConnectEvent","inner":[]}]}],"parameters":{"handler":{"name":"handler","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"onJoin":{"name":"onJoin","qualifiedName":"irc/irc.DumbBot.onJoin","comment":"","commentFrom":"","inheritedFrom":"irc.Bot.onJoin","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"irc/irc.JoinEvent","inner":[]}]}],"parameters":{"handler":{"name":"handler","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"onMessage":{"name":"onMessage","qualifiedName":"irc/irc.DumbBot.onMessage","comment":"","commentFrom":"","inheritedFrom":"irc.Bot.onMessage","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"irc/irc.MessageEvent","inner":[]}]}],"parameters":{"handler":{"name":"handler","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"irc/irc.DumbBot.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"whenReady":{"name":"whenReady","qualifiedName":"irc/irc.DumbBot.whenReady","comment":"","commentFrom":"","inheritedFrom":"irc.Bot.whenReady","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"irc/irc.ReadyEvent","inner":[]}]}],"parameters":{"handler":{"name":"handler","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}