{"name":"EventBus","qualifiedName":"irc/irc.EventBus","comment":"<p>Dispatches events to listeners using the Dart <a>irc/dart-async.Stream</a> API. The <a>irc/irc.EventBus</a> \nenables decoupled applications. It allows objects to interact without\nrequiring to explicitly define listeners and keeping track of them.</p>\n<p>Usually there is just one <a>irc/irc.EventBus</a> per application, but more than one \nmay be set up to group a specific set of events.</p>\n<p>Not all events should be broadcasted through the <a>irc/irc.EventBus</a> but only those of\ngeneral interest.</p>\n<p><strong>Note:</strong> Make sure that listeners on the stream handle the same type &lt;T> as \nthe generic type argument of <a>irc/irc.EventType</a>. Currently, this can't be expressed in \nDart - see <a href=\"https://code.google.com/p/dart/issues/detail?id=254\">Issue 254</a></p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"irc/irc.EventBus.EventBus-","comment":"<p>Creates <a>irc/event_bus.SimpleEventBus</a>, the default implementation of <a>irc/irc.EventBus</a>.</p>\n<p>If <a>irc/irc.EventBus.EventBus-.sync</a> is true, events are passed directly to the stream's listeners\nduring an add, addError or close call. If <a>irc/irc.EventBus.EventBus-.sync</a> is false, the event\nwill be passed to the listeners at a later time, after the code creating\nthe event has returned.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"irc/irc.EventBus","inner":[]}],"parameters":{"sync":{"name":"sync","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"fire":{"name":"fire","qualifiedName":"irc/irc.EventBus.fire","comment":"<p>Fires a new event on the event bus with the specified <a>irc/irc.EventBus.fire.data</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"eventType":{"name":"eventType","optional":false,"named":false,"default":false,"type":[{"outer":"irc/irc.EventType","inner":[]}],"value":null,"annotations":[]},"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"on":{"name":"on","qualifiedName":"irc/irc.EventBus.on","comment":"<p>Returns the <a>irc/dart-async.Stream</a> to listen for events of type <a>irc/irc.EventBus.on.eventType</a>. </p>\n<p>The returned <a>irc/dart-async.Stream</a> is a broadcast stream so multiple subscriptions are\nallowed.</p>\n<p>Each listener is handled independently, and if they pause, only the pausing\nlistener is affected. A paused listener will buffer events internally until\nunpaused or canceled. So it's usually better to just cancel and later \nsubscribe again (avoids memory leak).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"eventType":{"name":"eventType","optional":false,"named":false,"default":false,"type":[{"outer":"irc/irc.EventType","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"irc/irc.EventBus.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>irc/irc.EventBus.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"irc/irc.EventBus.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"irc/irc.EventBus.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>irc/irc.EventBus.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>irc/irc.EventBus.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"irc/irc.EventBus.noSuchMethod","comment":"<p><a>irc/irc.EventBus.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>irc/irc.EventBus.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>irc/irc.EventBus.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>irc/irc.EventBus.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"irc/irc.EventBus.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}