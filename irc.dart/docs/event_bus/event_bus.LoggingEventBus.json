{"name":"LoggingEventBus","qualifiedName":"event_bus/event_bus.LoggingEventBus","comment":"<p>A <a>event_bus/event_bus.SimpleEventBus</a> that adds logging.</p>","isAbstract":false,"superclass":"event_bus/event_bus.SimpleEventBus","implements":[],"subclass":[],"variables":{},"inheritedVariables":{"streamControllers":{"name":"streamControllers","qualifiedName":"event_bus/event_bus.SimpleEventBus.streamControllers","comment":"<p>Map containing a stream controller for each <a>event_bus/event_bus.EventType</a></p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"event_bus/event_bus.EventType","inner":[]},{"outer":"dart-async.StreamController","inner":[]}]}],"annotations":[]},"sync":{"name":"sync","qualifiedName":"event_bus/event_bus.SimpleEventBus.sync","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"fire":{"name":"fire","qualifiedName":"event_bus/event_bus.LoggingEventBus.fire","comment":"","commentFrom":"event_bus.SimpleEventBus.fire","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"eventType":{"name":"eventType","optional":false,"named":false,"default":false,"type":[{"outer":"event_bus/event_bus.EventType","inner":[]}],"value":null,"annotations":[]},"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"event_bus/event_bus.LoggingEventBus.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>event_bus/event_bus.LoggingEventBus.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"event_bus/event_bus.LoggingEventBus.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"event_bus/event_bus.LoggingEventBus.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>event_bus/event_bus.LoggingEventBus.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>event_bus/event_bus.LoggingEventBus.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"fire":{"name":"fire","qualifiedName":"event_bus/event_bus.LoggingEventBus.fire","comment":"<p>Fires a new event on the event bus with the specified <a>event_bus/event_bus.LoggingEventBus.fire.data</a>.</p>","commentFrom":"event_bus.EventBus.fire","inheritedFrom":"event_bus.SimpleEventBus.fire","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"eventType":{"name":"eventType","optional":false,"named":false,"default":false,"type":[{"outer":"event_bus/event_bus.EventType","inner":[]}],"value":null,"annotations":[]},"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"event_bus/event_bus.LoggingEventBus.noSuchMethod","comment":"<p><a>event_bus/event_bus.LoggingEventBus.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>event_bus/event_bus.LoggingEventBus.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>event_bus/event_bus.LoggingEventBus.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>event_bus/event_bus.LoggingEventBus.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"on":{"name":"on","qualifiedName":"event_bus/event_bus.LoggingEventBus.on","comment":"<p>Returns the <a>event_bus/dart-async.Stream</a> to listen for events of type <a>event_bus/event_bus.LoggingEventBus.on.eventType</a>. </p>\n<p>The returned <a>event_bus/dart-async.Stream</a> is a broadcast stream so multiple subscriptions are\nallowed.</p>\n<p>Each listener is handled independently, and if they pause, only the pausing\nlistener is affected. A paused listener will buffer events internally until\nunpaused or canceled. So it's usually better to just cancel and later \nsubscribe again (avoids memory leak).</p>","commentFrom":"event_bus.EventBus.on","inheritedFrom":"event_bus.SimpleEventBus.on","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"eventType":{"name":"eventType","optional":false,"named":false,"default":false,"type":[{"outer":"event_bus/event_bus.EventType","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"event_bus/event_bus.LoggingEventBus.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}