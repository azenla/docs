{"name":"event_bus","qualifiedName":"event_bus/event_bus","comment":"","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"EventBus","qualifiedName":"event_bus/event_bus.EventBus","preview":"<p>Dispatches events to listeners using the Dart <a>event_bus/dart-async.Stream</a> API. The <a>event_bus/event_bus.EventBus</a> \nenables decoupled applications. It allows objects to interact without\nrequiring to explicitly define listeners and keeping track of them.</p>"},{"name":"EventType","qualifiedName":"event_bus/event_bus.EventType","preview":"<p>Type class used to publish events with an <a>event_bus/event_bus.EventBus</a>.\n<a>event_bus/event_bus.EventType.T</a> is the type of data that is provided when an event is fired.</p>"},{"name":"LoggingEventBus","qualifiedName":"event_bus/event_bus.LoggingEventBus","preview":"<p>A <a>event_bus/event_bus.SimpleEventBus</a> that adds logging.</p>"},{"name":"SimpleEventBus","qualifiedName":"event_bus/event_bus.SimpleEventBus","preview":"<p>Basic implementation of <a>event_bus/event_bus.EventBus</a> that provides a broadcast <a>event_bus/dart-async.StreamController</a>\nfor each <a>event_bus/event_bus.EventType</a>.</p>"}],"typedef":{},"error":[]},"packageName":"event_bus","packageIntro":"<h1>Event Bus</h1>\n<p>A simple Event Bus using Dart <a href=\"http://api.dartlang.org/docs/releases/latest/dart_async/Stream.html\">Streams</a> \nfor decoupling applications.</p>\n<h2>Demo</h2>\n<p>See <a href=\"http://edu.makery.ch/projects/dart-event-bus\">Dart Event Bus in action</a>.</p>\n<p>All examples are also available in the <code>example</code> directory on GitHub.</p>\n<h2>Event Bus Pattern</h2>\n<p>An Event Bus follows the publish/subscribe pattern. It allows listeners to \nsubscribe for events and publishers to fire events. This enables objects to\ninteract without requiring to explicitly define listeners and keeping track of\nthem.</p>\n<h3>Event Bus and MVC</h3>\n<p>The Event Bus pattern is especially helpful for decoupling <a href=\"http://wikipedia.org/wiki/Model_View_Controller\">MVC</a> \n(or <a href=\"http://wikipedia.org/wiki/Model_View_Presenter\">MVP</a>) applications.</p>\n<p><strong>One group of MVC</strong> is not a problem.</p>\n<p><a href=\"https://raw.github.com/marcojakob/dart-event-bus/master/doc/mvc.png\"><img alt=\"Model-View-Controller\" src=\"https://raw.github.com/marcojakob/dart-event-bus/master/doc/mvc.png\"></img></a></p>\n<p>But as soon as there are <strong>multiple groups of MVCs</strong>, those groups will have to talk\nto each other. This creates a tight coupling between the controllers.</p>\n<p><a href=\"https://raw.github.com/marcojakob/dart-event-bus/master/doc/mvc-multi.png\"><img alt=\"Multi Model-View-Controllers\" src=\"https://raw.github.com/marcojakob/dart-event-bus/master/doc/mvc-multi.png\"></img></a></p>\n<p>By communication through an <strong>Event Bus</strong>, the coupling is reduced.</p>\n<p><a href=\"https://raw.github.com/marcojakob/dart-event-bus/master/doc/event-bus.png\"><img alt=\"Event Bus\" src=\"https://raw.github.com/marcojakob/dart-event-bus/master/doc/event-bus.png\"></img></a></p>\n<h2>Usage</h2>\n<h3>1. Add Dependency</h3>\n<p>Add the folowing to your <strong>pubspec.yaml</strong> and run <strong>pub install</strong></p>\n<pre class=\"yaml\"><code>\tdependencies:\n\t  event_bus: any\n</code></pre>\n<h3>2. Define Events</h3>\n<pre class=\"dart\"><code>import 'package:event_bus/event_bus.dart';\n\nfinal EventType&lt;User&gt; userLoggedInEvent = new EventType&lt;User&gt;();\nfinal EventType&lt;Order&gt; newOrderEvent = new EventType&lt;Order&gt;();\n</code></pre>\n<p>Note: The generic type of the event (<code>User</code> and <code>Order</code> in this case) is the \ntype of data that will be provided when the event is fired.</p>\n<h3>3. Create Event Bus</h3>\n<p>Create an instance of <code>EventBus</code> and make it available to other classes.</p>\n<p>Usually there is just one Event Bus per application, but more than one may be \nset up to group a specific set of events.</p>\n<pre class=\"dart\"><code>EventBus eventBus = new EventBus();\n</code></pre>\n<p>This will instantiate the default implementation of <code>EventBus</code> which is\n<code>SimpleEventBus</code>. You may provide your own <code>EventBus</code> by either extending \n<code>SimpleEventBus</code> or implementing <code>EventBus</code>.</p>\n<h3>4. Register Listeners</h3>\n<p>Register listeners that will be called whenever the event is fired.</p>\n<pre class=\"dart\"><code>eventBus.on(userLoggedInEvent).listen((User user) {\n  print(user.name);\t\n});\n</code></pre>\n<p><code>EventBus</code> uses Dart <a href=\"http://api.dartlang.org/docs/releases/latest/dart_async/Stream.html\">Streams</a>\nas its underlying mechanism to keep track of listeners. You may use all \nfunctionality available by the <a href=\"http://api.dartlang.org/docs/releases/latest/dart_async/Stream.html\">Stream</a>\nAPI. One example is the use of <a href=\"http://api.dartlang.org/docs/releases/latest/dart_async/StreamSubscription.html\">StreamSubscriptions</a>\nto later unsubscribe from the events.</p>\n<pre class=\"dart\"><code>StreamSubscription&lt;User&gt; subscription = eventBus.on(userLoggedInEvent).listen((User user) {\n  print(user.name);\t\n});\n\nsubscription.cancel();\n</code></pre>\n<h3>5. Fire Events</h3>\n<p>Finally, we need to fire an event.</p>\n<pre class=\"dart\"><code>eventBus.fire(userLoggedInEvent, new User('Mickey'));\n</code></pre>\n<h2>License</h2>\n<p>The MIT License (MIT)</p>"}