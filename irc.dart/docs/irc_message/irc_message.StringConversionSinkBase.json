{"name":"StringConversionSinkBase","qualifiedName":"irc_message/irc_message.StringConversionSinkBase","comment":"<p>This class provides a base-class for converters that need to accept String\ninputs.</p>","isAbstract":true,"superclass":"irc_message/irc_message.StringConversionSinkMixin","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"irc_message/irc_message.StringConversionSinkBase.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>irc_message/irc_message.StringConversionSinkBase.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"irc_message/irc_message.StringConversionSinkBase.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"irc_message/irc_message.StringConversionSinkBase.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>irc_message/irc_message.StringConversionSinkBase.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>irc_message/irc_message.StringConversionSinkBase.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"add":{"name":"add","qualifiedName":"irc_message/irc_message.StringConversionSinkBase.add","comment":"<p>Adds chunked data to this sink.</p>\n<p>This method is also used when converters are used as <a>irc_message/irc_message.StreamTransformer</a>s.</p>","commentFrom":"irc_message.ChunkedConversionSink.add","inheritedFrom":"irc_message.StringConversionSinkMixin.add","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addSlice":{"name":"addSlice","qualifiedName":"irc_message/irc_message.StringConversionSinkBase.addSlice","comment":"<p>Adds the next chunk to <code>this</code>.</p>\n<p>Adds the substring defined by <a>irc_message/irc_message.StringConversionSinkBase.addSlice.start</a> and <a>irc_message/irc_message.StringConversionSinkBase.addSlice.end</a>-exclusive to <code>this</code>.</p>\n<p>If <a>irc_message/irc_message.StringConversionSinkBase.addSlice.isLast</a> is <code>true</code> closes <code>this</code>.</p>","commentFrom":"irc_message.StringConversionSink.addSlice","inheritedFrom":"irc_message.StringConversionSinkMixin.addSlice","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"isLast":{"name":"isLast","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"asStringSink":{"name":"asStringSink","qualifiedName":"irc_message/irc_message.StringConversionSinkBase.asStringSink","comment":"<p>Returns <code>this</code> as a <a>irc_message/dart-convert.ClosableStringSink</a>.</p>\n<p>If used, this method must be the first and only call to <code>this</code>. It\ninvalidates <code>this</code>. All further operations must be performed on the result.</p>","commentFrom":"irc_message.StringConversionSink.asStringSink","inheritedFrom":"irc_message.StringConversionSinkMixin.asStringSink","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.ClosableStringSink","inner":[]}],"parameters":{},"annotations":[]},"asUtf8Sink":{"name":"asUtf8Sink","qualifiedName":"irc_message/irc_message.StringConversionSinkBase.asUtf8Sink","comment":"<p>Returns <code>this</code> as a sink that accepts UTF-8 input.</p>\n<p>If used, this method must be the first and only call to <code>this</code>. It\ninvalidates <code>this</code>. All further operations must be performed on the result.</p>","commentFrom":"irc_message.StringConversionSink.asUtf8Sink","inheritedFrom":"irc_message.StringConversionSinkMixin.asUtf8Sink","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.ByteConversionSink","inner":[]}],"parameters":{"allowMalformed":{"name":"allowMalformed","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"close":{"name":"close","qualifiedName":"irc_message/irc_message.StringConversionSinkBase.close","comment":"<p>Closes the sink.</p>\n<p>This signals the end of the chunked conversion. This method is called\nwhen converters are used as <a>irc_message/irc_message.StreamTransformer</a>'s.</p>","commentFrom":"irc_message.ChunkedConversionSink.close","inheritedFrom":"irc_message.StringConversionSinkMixin.close","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"irc_message/irc_message.StringConversionSinkBase.noSuchMethod","comment":"<p><a>irc_message/irc_message.StringConversionSinkBase.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>irc_message/irc_message.StringConversionSinkBase.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>irc_message/irc_message.StringConversionSinkBase.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>irc_message/irc_message.StringConversionSinkBase.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"irc_message/irc_message.StringConversionSinkBase.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}